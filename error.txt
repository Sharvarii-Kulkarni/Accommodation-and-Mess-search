C:\Users\Lenovo\Desktop\Accomodation and mess search>curl -X GET "http://127.0.0.1:5000/search_accommodations?location=pune&type=all&budget=30000"
<!doctype html>
<html lang=en>
  <head>
    <title>sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^

[SQL: SELECT accommodations.id AS accommodations_id, accommodations.name AS accommodations_name, accommodations.location AS accommodations_location, accommodations.type AS accommodations_type, accommodations.rent_price AS accommodations_rent_price, accommodations.description AS accommodations_description, accommodations.image_url AS accommodations_image_url, accommodations.owner AS accommodations_owner, accommodations.contact AS accommodations_contact, accommodations.bedrooms AS accommodations_bedrooms, accommodations.bathrooms AS accommodations_bathrooms, accommodations.balconies AS accommodations_balconies, accommodations.carpet_area AS accommodations_carpet_area, accommodations.furnished AS accommodations_furnished, accommodations.deposit AS accommodations_deposit, accommodations.listing_date AS accommodations_listing_date, accommodations.amenities AS accommodations_amenities
FROM accommodations
WHERE accommodations.location ILIKE %(location_1)s AND accommodations.rent_price &lt;= %(rent_price_1)s]
[parameters: {&#39;location_1&#39;: &#39;%pune%&#39;, &#39;rent_price_1&#39;: 30000}]
(Background on this error at: https://sqlalche.me/e/20/f405)
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "XcmzThdbGcfdR2l2Rf7J";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ProgrammingError</h1>
<div class="detail">
  <p class="errormsg">sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^

[SQL: SELECT accommodations.id AS accommodations_id, accommodations.name AS accommodations_name, accommodations.location AS accommodations_location, accommodations.type AS accommodations_type, accommodations.rent_price AS accommodations_rent_price, accommodations.description AS accommodations_description, accommodations.image_url AS accommodations_image_url, accommodations.owner AS accommodations_owner, accommodations.contact AS accommodations_contact, accommodations.bedrooms AS accommodations_bedrooms, accommodations.bathrooms AS accommodations_bathrooms, accommodations.balconies AS accommodations_balconies, accommodations.carpet_area AS accommodations_carpet_area, accommodations.furnished AS accommodations_furnished, accommodations.deposit AS accommodations_deposit, accommodations.listing_date AS accommodations_listing_date, accommodations.amenities AS accommodations_amenities
FROM accommodations
WHERE accommodations.location ILIKE %(location_1)s AND accommodations.rent_price &lt;= %(rent_price_1)s]
[parameters: {&#39;location_1&#39;: &#39;%pune%&#39;, &#39;rent_price_1&#39;: 30000}]
(Background on this error at: https://sqlalche.me/e/20/f405)
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2539396478816">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2539396478960">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>

<li><div class="exc-divider">The above exception was the direct cause of the following exception:</div>
<li><div class="frame" id="frame-2539396472192">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2539396473056">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2539396473200">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2539396473776">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2539396473920">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2539396474064">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py"</cite>,
      line <em class="line">194</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre>
<pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre>
<pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre>
<pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre>
<pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))
<span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">                </span>return wrapped_function</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre>
<pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre>
<pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div>
</div>

<li><div class="frame" id="frame-2539396474208">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2539396474352">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2539396474496">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\decorator.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">wrapped_function</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>options = get_cors_options(current_app, _options)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if options.get(&#39;automatic_options&#39;) and request.method == &#39;OPTIONS&#39;:</pre>
<pre class="line before"><span class="ws">                </span>resp = current_app.make_default_options_response()</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>resp = make_response(f(*args, **kwargs))
<span class="ws">                </span>                     ^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>set_cors_headers(resp, options)</pre>
<pre class="line after"><span class="ws">            </span>setattr(resp, FLASK_CORS_EVALUATED, True)</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2539396474640">
  <h4>File <cite class="filename">"C:\Users\Lenovo\Desktop\Accomodation and mess search\Backend\routes.py"</cite>,
      line <em class="line">90</em>,
      in <code class="function">search_accommodations</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if max_budget:</pre>
<pre class="line before"><span class="ws">            </span>query = query.filter(Accommodation.rent_price &lt;= max_budget)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>print(query)  # Debugging</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>results = query.all()
<span class="ws">        </span>          ^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return jsonify([</pre>
<pre class="line after"><span class="ws">            </span>{</pre>
<pre class="line after"><span class="ws">                </span>&#34;id&#34;: acc.id,</pre>
<pre class="line after"><span class="ws">                </span>&#34;name&#34;: acc.name,</pre></div>
</div>

<li><div class="frame" id="frame-2539396475648">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2699</em>,
      in <code class="function">all</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.all` - v2 comparable method.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>:meth:`_engine.Result.scalars` - v2 comparable method.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._iter().all()  # type: ignore
<span class="ws">        </span>       ^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@_generative</pre>
<pre class="line after"><span class="ws">    </span>@_assertions(_no_clauseelement_condition)</pre>
<pre class="line after"><span class="ws">    </span>def from_statement(self, statement: ExecutableReturnsRows) -&gt; Self:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Execute the given SELECT statement and return results.</pre></div>
</div>

<li><div class="frame" id="frame-2539396476080">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py"</cite>,
      line <em class="line">2853</em>,
      in <code class="function">_iter</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre>
<pre class="line before"><span class="ws">        </span># new style execution.</pre>
<pre class="line before"><span class="ws">        </span>params = self._params</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>statement = self._statement_20()</pre>
<pre class="line current"><span class="ws">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
<span class="ws">        </span>                                              </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2539396476224">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2365</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:return: a :class:`_engine.Result` object.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self._execute_internal(
<span class="ws">        </span>       </pre>
<pre class="line after"><span class="ws">            </span>statement,</pre>
<pre class="line after"><span class="ws">            </span>params,</pre>
<pre class="line after"><span class="ws">            </span>execution_options=execution_options,</pre>
<pre class="line after"><span class="ws">            </span>bind_arguments=bind_arguments,</pre>
<pre class="line after"><span class="ws">            </span>_parent_execute_state=_parent_execute_state,</pre></div>
</div>

<li><div class="frame" id="frame-2539396476368">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py"</cite>,
      line <em class="line">2251</em>,
      in <code class="function">_execute_internal</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return conn.scalar(</pre>
<pre class="line before"><span class="ws">                </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if compile_state_cls:</pre>
<pre class="line current"><span class="ws">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(
<span class="ws">            </span>                      </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>statement,</pre>
<pre class="line after"><span class="ws">                </span>params or {},</pre>
<pre class="line after"><span class="ws">                </span>execution_options,</pre>
<pre class="line after"><span class="ws">                </span>bind_arguments,</pre></div>
</div>

<li><div class="frame" id="frame-2539396476512">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\context.py"</cite>,
      line <em class="line">305</em>,
      in <code class="function">orm_execute_statement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>params,</pre>
<pre class="line before"><span class="ws">        </span>execution_options,</pre>
<pre class="line before"><span class="ws">        </span>bind_arguments,</pre>
<pre class="line before"><span class="ws">        </span>conn,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result:</pre>
<pre class="line current"><span class="ws">        </span>result = conn.execute(
<span class="ws">        </span>         </pre>
<pre class="line after"><span class="ws">            </span>statement, params or {}, execution_options=execution_options</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>return cls.orm_setup_cursor_result(</pre>
<pre class="line after"><span class="ws">            </span>session,</pre>
<pre class="line after"><span class="ws">            </span>statement,</pre></div>
</div>

<li><div class="frame" id="frame-2539396476656">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1416</em>,
      in <code class="function">execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>meth = statement._execute_on_connection</pre>
<pre class="line before"><span class="ws">        </span>except AttributeError as err:</pre>
<pre class="line before"><span class="ws">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return meth(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self,</pre>
<pre class="line after"><span class="ws">                </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">                </span>execution_options or NO_OPTIONS,</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2539396476800">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\sql\elements.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">_execute_on_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>execution_options: CoreExecuteOptionsParameter,</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; Result[Any]:</pre>
<pre class="line before"><span class="ws">        </span>if self.supports_execution:</pre>
<pre class="line before"><span class="ws">            </span>if TYPE_CHECKING:</pre>
<pre class="line before"><span class="ws">                </span>assert isinstance(self, Executable)</pre>
<pre class="line current"><span class="ws">            </span>return connection._execute_clauseelement(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>self, distilled_params, execution_options</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">        </span>else:</pre>
<pre class="line after"><span class="ws">            </span>raise exc.ObjectNotExecutableError(self)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2539396477952">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1638</em>,
      in <code class="function">_execute_clauseelement</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>column_keys=keys,</pre>
<pre class="line before"><span class="ws">            </span>for_executemany=for_executemany,</pre>
<pre class="line before"><span class="ws">            </span>schema_translate_map=schema_translate_map,</pre>
<pre class="line before"><span class="ws">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line current"><span class="ws">        </span>ret = self._execute_context(
<span class="ws">        </span>      </pre>
<pre class="line after"><span class="ws">            </span>dialect,</pre>
<pre class="line after"><span class="ws">            </span>dialect.execution_ctx_cls._init_compiled,</pre>
<pre class="line after"><span class="ws">            </span>compiled_sql,</pre>
<pre class="line after"><span class="ws">            </span>distilled_parameters,</pre>
<pre class="line after"><span class="ws">            </span>execution_options,</pre></div>
</div>

<li><div class="frame" id="frame-2539396478096">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1843</em>,
      in <code class="function">_execute_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>context.pre_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre>
<pre class="line before"><span class="ws">            </span>return self._exec_insertmany_context(dialect, context)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line current"><span class="ws">            </span>return self._exec_single_context(
<span class="ws">            </span>       </pre>
<pre class="line after"><span class="ws">                </span>dialect, context, statement, parameters</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _exec_single_context(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre></div>
</div>

<li><div class="frame" id="frame-2539396478240">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1983</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>context.post_exec()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>result = context._setup_result_proxy()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except BaseException as e:</pre>
<pre class="line current"><span class="ws">            </span>self._handle_dbapi_exception(
<span class="ws">            </span>^</pre>
<pre class="line after"><span class="ws">                </span>e, str_statement, effective_parameters, cursor, context</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2539396478384">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">2352</em>,
      in <code class="function">_handle_dbapi_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if newraise:</pre>
<pre class="line before"><span class="ws">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>
<pre class="line before"><span class="ws">            </span>elif should_wrap:</pre>
<pre class="line before"><span class="ws">                </span>assert sqlalchemy_exception is not None</pre>
<pre class="line current"><span class="ws">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
<span class="ws">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>assert exc_info[1] is not None</pre>
<pre class="line after"><span class="ws">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre>
<pre class="line after"><span class="ws">            </span>del self._reentrant_error</pre></div>
</div>

<li><div class="frame" id="frame-2539396478528">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py"</cite>,
      line <em class="line">1964</em>,
      in <code class="function">_exec_single_context</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                            </span>context,</pre>
<pre class="line before"><span class="ws">                        </span>):</pre>
<pre class="line before"><span class="ws">                            </span>evt_handled = True</pre>
<pre class="line before"><span class="ws">                            </span>break</pre>
<pre class="line before"><span class="ws">                </span>if not evt_handled:</pre>
<pre class="line current"><span class="ws">                    </span>self.dialect.do_execute(
<span class="ws">                    </span>^</pre>
<pre class="line after"><span class="ws">                        </span>cursor, str_statement, effective_parameters, context</pre>
<pre class="line after"><span class="ws">                    </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>if self._has_events or self.engine._has_events:</pre>
<pre class="line after"><span class="ws">                </span>self.dispatch.after_cursor_execute(</pre></div>
</div>

<li><div class="frame" id="frame-2539396478672">
  <h4>File <cite class="filename">"C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py"</cite>,
      line <em class="line">942</em>,
      in <code class="function">do_execute</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>
<pre class="line before"><span class="ws">        </span>cursor.executemany(statement, parameters)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>
<pre class="line current"><span class="ws">        </span>cursor.execute(statement, parameters)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>
<pre class="line after"><span class="ws">        </span>cursor.execute(statement)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>
</div>
</ul>
  <blockquote>sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^

[SQL: SELECT accommodations.id AS accommodations_id, accommodations.name AS accommodations_name, accommodations.location AS accommodations_location, accommodations.type AS accommodations_type, accommodations.rent_price AS accommodations_rent_price, accommodations.description AS accommodations_description, accommodations.image_url AS accommodations_image_url, accommodations.owner AS accommodations_owner, accommodations.contact AS accommodations_contact, accommodations.bedrooms AS accommodations_bedrooms, accommodations.bathrooms AS accommodations_bathrooms, accommodations.balconies AS accommodations_balconies, accommodations.carpet_area AS accommodations_carpet_area, accommodations.furnished AS accommodations_furnished, accommodations.deposit AS accommodations_deposit, accommodations.listing_date AS accommodations_listing_date, accommodations.amenities AS accommodations_amenities
FROM accommodations
WHERE accommodations.location ILIKE %(location_1)s AND accommodations.rent_price &lt;= %(rent_price_1)s]
[parameters: {&#39;location_1&#39;: &#39;%pune%&#39;, &#39;rent_price_1&#39;: 30000}]
(Background on this error at: https://sqlalche.me/e/20/f405)
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
psycopg2.errors.UndefinedColumn: column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\decorator.py&#34;, line 130, in wrapped_function
    resp = make_response(f(*args, **kwargs))
                         ^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\Desktop\Accomodation and mess search\Backend\routes.py&#34;, line 90, in search_accommodations
    results = query.all()
              ^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py&#34;, line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py&#34;, line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\context.py&#34;, line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1416, in execute
    return meth(
           ^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\sql\elements.py&#34;, line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py&#34;, line 1964, in _exec_single_context
    self.dialect.do_execute(
  File &#34;C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py&#34;, line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^

[SQL: SELECT accommodations.id AS accommodations_id, accommodations.name AS accommodations_name, accommodations.location AS accommodations_location, accommodations.type AS accommodations_type, accommodations.rent_price AS accommodations_rent_price, accommodations.description AS accommodations_description, accommodations.image_url AS accommodations_image_url, accommodations.owner AS accommodations_owner, accommodations.contact AS accommodations_contact, accommodations.bedrooms AS accommodations_bedrooms, accommodations.bathrooms AS accommodations_bathrooms, accommodations.balconies AS accommodations_balconies, accommodations.carpet_area AS accommodations_carpet_area, accommodations.furnished AS accommodations_furnished, accommodations.deposit AS accommodations_deposit, accommodations.listing_date AS accommodations_listing_date, accommodations.amenities AS accommodations_amenities
FROM accommodations
WHERE accommodations.location ILIKE %(location_1)s AND accommodations.rent_price &lt;= %(rent_price_1)s]
[parameters: {&#39;location_1&#39;: &#39;%pune%&#39;, &#39;rent_price_1&#39;: 30000}]
(Background on this error at: https://sqlalche.me/e/20/f405)
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
psycopg2.errors.UndefinedColumn: column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
                                                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask_cors\decorator.py", line 130, in wrapped_function
    resp = make_response(f(*args, **kwargs))
                         ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\Desktop\Accomodation and mess search\Backend\routes.py", line 90, in search_accommodations
    results = query.all()
              ^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py", line 2699, in all
    return self._iter().all()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\query.py", line 2853, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
                                                  ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\orm\context.py", line 305, in orm_execute_statement
    result = conn.execute(
             ^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\sql\elements.py", line 516, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\Lenovo\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\default.py", line 942, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column accommodations.owner does not exist
LINE 1: ...mmodations.image_url AS accommodations_image_url, accommodat...
                                                             ^

[SQL: SELECT accommodations.id AS accommodations_id, accommodations.name AS accommodations_name, accommodations.location AS accommodations_location, accommodations.type AS accommodations_type, accommodations.rent_price AS accommodations_rent_price, accommodations.description AS accommodations_description, accommodations.image_url AS accommodations_image_url, accommodations.owner AS accommodations_owner, accommodations.contact AS accommodations_contact, accommodations.bedrooms AS accommodations_bedrooms, accommodations.bathrooms AS accommodations_bathrooms, accommodations.balconies AS accommodations_balconies, accommodations.carpet_area AS accommodations_carpet_area, accommodations.furnished AS accommodations_furnished, accommodations.deposit AS accommodations_deposit, accommodations.listing_date AS accommodations_listing_date, accommodations.amenities AS accommodations_amenities
FROM accommodations
WHERE accommodations.location ILIKE %(location_1)s AND accommodations.rent_price <= %(rent_price_1)s]
[parameters: {'location_1': '%pune%', 'rent_price_1': 30000}]
(Background on this error at: https://sqlalche.me/e/20/f405)


-->

C:\Users\Lenovo\Desktop\Accomodation and mess search>